# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs: 
  build-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            sudo npm install
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build-{{ checksum "./package-lock.json" }}

  test-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            sudo npm install
            npm run test

  eslint-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Eslint front-end
          command: |
            sudo npm install
            npm run lint

  upload-docker:
    docker:
      - image: cimg/python:3.7.16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest
  
  test-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get nodes
          name: Test cluster
    
  deploy-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl create deploy $DOCKERHUB_USERNAME --image=$DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest
            kubectl get deploy,rs,svc,pods
          name: Deploy cluster

  create-service:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ./scripts/service.yml
          resource-name: service/rolling-service

  create-deployment:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./scripts/deployment.yml
          resource-name: deployment/rolling-app

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - eslint-frontend:
          requires:
            - build-frontend
      - upload-docker:
          requires: [test-frontend, eslint-frontend]
      - aws-eks/create-cluster:
          cluster-name: capstone
          requires:
            - upload-docker
      - test-cluster:
          cluster-name: capstone
          requires:
            - aws-eks/create-cluster
      - create-service:
          cluster-name: capstone
          requires:
            - test-cluster
      - create-deployment:
          cluster-name: capstone
          requires:
            - create-service
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: "rolling-deployment-container=$DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
          requires:
            - create-deployment
          resource-name: deployment/rolling-app
      