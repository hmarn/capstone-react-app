# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

jobs: 
  build-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            sudo npm install
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build-{{ checksum "./package-lock.json" }}

  test-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            sudo npm install
            npm run test

  eslint-frontend:
    docker:
      # Use the same Node base as ./Dockerfile
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./package-lock.json" }}
      - run:
          name: Eslint front-end
          command: |
            sudo npm install
            npm run lint

  upload-docker:
    docker:
      - image: cimg/python:3.7.16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./cloudformation/infra.yml \
              --tags project=capstone-project \
              --stack-name stack-create-infra-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7} "
      - run:
          name: Ensure Cluster exist
          command: |
            export VPC_ID=$(aws ec2 describe-vpcs \
                              --filters Name=tag:Name,Values=capstone-project-VPC-${CIRCLE_WORKFLOW_ID:0:7} \
                              --query Vpcs[].VpcId --output text)
            
            export SECURITY_GROUP_ID=(aws ec2 describe-security-groups \
                                        --filters Name=tag:Name,Values='capstone-project-SG-${CIRCLE_WORKFLOW_ID:0:7}' \
                                        --query SecurityGroups[].GroupId --output text)

            aws cloudformation deploy \
              --template-file ./cloudformation/cluster.yml \
              --tags project=capstone-project \
              --stack-name stack-create-cluster-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}, VpcId=${VPC_ID}, SGId={SECURITY_GROUP_ID}"
      # - run:
      #     name: Ensure Node Group exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file ./cloudformation/node-group.yml \
      #         --tags project=capstone-project \
      #         --stack-name stack-create-node-group-${CIRCLE_WORKFLOW_ID:0:7} \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Ensure Node Instances exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file ./cloudformation/nodes.yml \
      #         --tags project=capstone-project \
      #         --stack-name stack-create-nodes-${CIRCLE_WORKFLOW_ID:0:7} \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Add Node instances IPs to ansible inventory
      #     command: |
      #       aws cloudformation \
      #       list-exports \
      #       --query "Exports[?Name==\`capstone-project-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
      #       --output text >> ~/project/ansible/inventory.txt

      #       echo "List Inventory:"
      #       cat ~/project/ansible/inventory.txt
      #       echo "End!!!"
      # - run:
      #     name: Installing Tar
      #     command: yum install -y tar gzip
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/ansible/inventory.txt

workflows:
  version: 2
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - eslint-frontend:
          requires:
            - build-frontend
      - upload-docker:
          requires: [test-frontend, eslint-frontend]
      - deploy-infrastructure:
          requires:
            - upload-docker
          filters:
            branches:
              only: [build-infra]

      